{"ast":null,"code":"var _jsxFileName = \"/Users/younis/Desktop/KeepNotes/client/src/components/Note/Note.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from \"react\";\nimport \"./Note.scss\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faArchive, faBackward, faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport { useHistory, useLocation, useParams } from \"react-router\";\nimport { putRequest, deleteRequest } from \"../../utils/apiRequest\";\nimport { BASE_URL, UPDATE_NOTE, DELETE_NOTE } from \"../../utils/apiEndpoints\";\nimport { NotesContext } from \"../../context/contex\";\nimport { noteFormatDate } from \"../../utils/hekpers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Note = () => {\n  _s();\n\n  const history = useHistory();\n  const location = useLocation();\n  const params = useParams();\n  const [title, setTitle] = useState(\"\");\n  const [desc, setDesc] = useState(\"\");\n  const notesContext = useContext(NotesContext);\n  const [updatedAt, setUpdatedAt] = useState(\"\");\n  const [isArchive, setIsArchive] = useState(0);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    // note comes from the usehistory() from Sidenav componeent\n    if (location.note) {\n      setTitle(location.note.title);\n      setDesc(location.note.desc);\n      setUpdatedAt(location.note.updatedAt);\n      setIsArchive(location.note.archive);\n    }\n  }, [location.note]);\n  useEffect(() => {\n    if (notesContext.notesState.length > 0) {\n      const [selectednote] = notesContext.notesState.filter(e => e._id === params.id);\n\n      if (selectednote) {\n        setTitle(selectednote.title);\n        setDesc(selectednote.desc);\n        setUpdatedAt(selectednote.updatedAt);\n        setIsArchive(selectednote.archive);\n      }\n    }\n  }, [notesContext.notesState]);\n\n  const handleTitleChange = e => {\n    setTitle(e.target.value);\n  };\n\n  const handleDescChange = e => {\n    setDesc(e.target.value);\n  };\n\n  const handleUpdateNote = async key => {\n    let query = {};\n\n    if (key == \"title\") {\n      query[\"title\"] = title;\n    } else if (key == \"desc\") {\n      query[\"desc\"] = desc;\n    }\n\n    const response = await putRequest(`${BASE_URL}${UPDATE_NOTE}${params.id}`, query);\n\n    if (response.error) {\n      setError(response.error);\n      return false;\n    }\n\n    notesContext.notesDispatch({\n      type: \"updateNoteSuccess\",\n      payload: response,\n      id: params.id\n    });\n  };\n\n  const handleArchiveNote = async () => {\n    let query = {\n      archive: 1\n    };\n    const response = await putRequest(`${BASE_URL}${UPDATE_NOTE}${params.id}`, query);\n\n    if (response.error) {\n      setError(response.error);\n      return false;\n    }\n\n    notesContext.notesDispatch({\n      type: \"archiveNoteSuccess\",\n      id: params.id\n    });\n    resetState();\n    history.push(`/all-notes`);\n  };\n\n  const handleUnArchiveNote = async () => {\n    let query = {\n      archive: 0\n    };\n    const response = await putRequest(`${BASE_URL}${UPDATE_NOTE}${params.id}`, query);\n\n    if (response.error) {\n      setError(response.error);\n      return false;\n    }\n\n    notesContext.notesDispatch({\n      type: \"archiveNoteSuccess\",\n      id: params.id\n    });\n    resetState();\n    history.push(`/trash`);\n  };\n\n  const handleDeleteNote = async () => {\n    const response = await deleteRequest(`${BASE_URL}${DELETE_NOTE}${params.id}`);\n\n    if (response.error) {\n      setError(response.error);\n      return false;\n    }\n\n    notesContext.notesDispatch({\n      type: \"deleteNoteSuccess\",\n      id: response\n    });\n    resetState();\n    history.push(\"/trash\");\n  };\n\n  const resetState = () => {\n    setTitle(\"\");\n    setDesc(\"\");\n    setUpdatedAt(\"\");\n    setIsArchive(0);\n    setError(null);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"note\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"note__header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"note__header-date\",\n        children: [\"last edited on \", updatedAt]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"noye__header-action-btn\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"action-btn\",\n          children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            className: \"icon\",\n            icon: faArchive\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"note__body\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"note__body-head\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          value: title,\n          onChange: handleTitleChange,\n          type: \"text\",\n          placeholder: \"Title\" // to update our title database\n          ,\n          onBlur: () => handleUpdateNote(\"title\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"note__body-content\",\n        children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n          onChange: handleDescChange,\n          value: desc,\n          placeholder: \"Start writing....\" // to update our desc database\n          ,\n          onBlur: () => handleUpdateNote(\"desc\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Note, \"kqKhKatZvIGUViOAdHf9YWBb5DY=\", false, function () {\n  return [useHistory, useLocation, useParams];\n});\n\n_c = Note;\nexport default Note;\n\nvar _c;\n\n$RefreshReg$(_c, \"Note\");","map":{"version":3,"sources":["/Users/younis/Desktop/KeepNotes/client/src/components/Note/Note.jsx"],"names":["React","useContext","useEffect","useState","FontAwesomeIcon","faArchive","faBackward","faTrash","useHistory","useLocation","useParams","putRequest","deleteRequest","BASE_URL","UPDATE_NOTE","DELETE_NOTE","NotesContext","noteFormatDate","Note","history","location","params","title","setTitle","desc","setDesc","notesContext","updatedAt","setUpdatedAt","isArchive","setIsArchive","error","setError","note","archive","notesState","length","selectednote","filter","e","_id","id","handleTitleChange","target","value","handleDescChange","handleUpdateNote","key","query","response","notesDispatch","type","payload","handleArchiveNote","resetState","push","handleUnArchiveNote","handleDeleteNote"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport \"./Note.scss\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faArchive,\n  faBackward,\n  faTrash,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { useHistory, useLocation, useParams } from \"react-router\";\nimport { putRequest, deleteRequest } from \"../../utils/apiRequest\";\nimport { BASE_URL, UPDATE_NOTE, DELETE_NOTE } from \"../../utils/apiEndpoints\";\nimport { NotesContext } from \"../../context/contex\";\nimport { noteFormatDate } from \"../../utils/hekpers\";\n\nconst Note = () => {\n  const history = useHistory();\n  const location = useLocation();\n  const params = useParams();\n  const [title, setTitle] = useState(\"\");\n  const [desc, setDesc] = useState(\"\");\n  const notesContext = useContext(NotesContext);\n  const [updatedAt, setUpdatedAt] = useState(\"\");\n  const [isArchive, setIsArchive] = useState(0);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    // note comes from the usehistory() from Sidenav componeent\n    if (location.note) {\n      setTitle(location.note.title);\n      setDesc(location.note.desc);\n      setUpdatedAt(location.note.updatedAt);\n      setIsArchive(location.note.archive);\n    }\n  }, [location.note]);\n\n  useEffect(() => {\n    if (notesContext.notesState.length > 0) {\n      const [selectednote] = notesContext.notesState.filter(\n        (e) => e._id === params.id\n      );\n      if (selectednote) {\n        setTitle(selectednote.title);\n        setDesc(selectednote.desc);\n        setUpdatedAt(selectednote.updatedAt);\n        setIsArchive(selectednote.archive);\n      }\n    }\n  }, [notesContext.notesState]);\n\n  const handleTitleChange = (e) => {\n    setTitle(e.target.value);\n  };\n\n  const handleDescChange = (e) => {\n    setDesc(e.target.value);\n  };\n\n  const handleUpdateNote = async (key) => {\n    let query = {};\n    if (key == \"title\") {\n      query[\"title\"] = title;\n    } else if (key == \"desc\") {\n      query[\"desc\"] = desc;\n    }\n\n    const response = await putRequest(\n      `${BASE_URL}${UPDATE_NOTE}${params.id}`,\n      query\n    );\n    if (response.error) {\n      setError(response.error);\n      return false;\n    }\n    notesContext.notesDispatch({\n      type: \"updateNoteSuccess\",\n      payload: response,\n      id: params.id,\n    });\n  };\n\n  const handleArchiveNote = async () => {\n    let query = {\n      archive: 1,\n    };\n    const response = await putRequest(\n      `${BASE_URL}${UPDATE_NOTE}${params.id}`,\n      query\n    );\n    if (response.error) {\n      setError(response.error);\n      return false;\n    }\n    notesContext.notesDispatch({ type: \"archiveNoteSuccess\", id: params.id });\n    resetState();\n    history.push(`/all-notes`);\n  };\n\n  const handleUnArchiveNote = async () => {\n    let query = {\n      archive: 0,\n    };\n\n    const response = await putRequest(\n      `${BASE_URL}${UPDATE_NOTE}${params.id}`,\n      query\n    );\n    if (response.error) {\n      setError(response.error);\n      return false;\n    }\n    notesContext.notesDispatch({ type: \"archiveNoteSuccess\", id: params.id });\n    resetState();\n    history.push(`/trash`);\n  };\n\n  const handleDeleteNote = async () => {\n    const response = await deleteRequest(\n      `${BASE_URL}${DELETE_NOTE}${params.id}`\n    );\n    if (response.error) {\n      setError(response.error);\n      return false;\n    }\n    notesContext.notesDispatch({ type: \"deleteNoteSuccess\", id: response });\n    resetState();\n    history.push(\"/trash\");\n  };\n\n  const resetState = () => {\n    setTitle(\"\");\n    setDesc(\"\");\n    setUpdatedAt(\"\");\n    setIsArchive(0);\n    setError(null);\n  };\n\n  return (\n    <div className=\"note\">\n      <div className=\"note__header\">\n        <div className=\"note__header-date\">last edited on {updatedAt}</div>\n        <div className=\"noye__header-action-btn\">\n          <div className=\"action-btn\">\n            <FontAwesomeIcon className=\"icon\" icon={faArchive} />\n          </div>\n        </div>\n      </div>\n      <div className=\"note__body\">\n        <div className=\"note__body-head\">\n          <input\n            value={title}\n            onChange={handleTitleChange}\n            type=\"text\"\n            placeholder=\"Title\"\n            // to update our title database\n            onBlur={() => handleUpdateNote(\"title\")}\n          />\n        </div>\n        <div className=\"note__body-content\">\n          <textarea\n            onChange={handleDescChange}\n            value={desc}\n            placeholder=\"Start writing....\"\n            // to update our desc database\n            onBlur={() => handleUpdateNote(\"desc\")}\n          ></textarea>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Note;\n"]},"metadata":{},"sourceType":"module"}